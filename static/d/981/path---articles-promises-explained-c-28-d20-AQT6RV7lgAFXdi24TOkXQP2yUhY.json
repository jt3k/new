{"data":{"site":{"siteMetadata":{"title":"Веб-стандарты"}},"markdownRemark":{"id":"9427a82e-82c5-5e7a-9047-996db0792010","excerpt":"Промисы на примерах из жизни Поговорим о промисах простыми словами Перевод « JavaScript: Promises explained with simple real life analogies…","html":"<h1>Промисы на примерах из жизни</h1>\n<p>Поговорим о промисах простыми словами</p>\n<p><em>Перевод «<a href=\"https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138\">JavaScript: Promises explained with simple real life analogies</a>» Шрути Капур.</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/11402/1*ycoN6Jf7xaaSnAi0S9TYmQ.jpeg\" alt=\"Ай промис, фото [Бена Уайта](https://unsplash.com/photos/tX4-tYibILg).\"><em>Ай промис, фото <a href=\"https://unsplash.com/photos/tX4-tYibILg\">Бена Уайта</a>.</em></p>\n<h2>Промисы простыми словами</h2>\n<p>Представьте это как разговор между двумя людьми:</p>\n<blockquote>\n<p><strong>Алекс</strong>: Эй, мистер Промис! Можешь сбегать в магазин и принести мне itemA для блюда, которое мы приготовим сегодня вечером?\n<strong>Промис</strong>: Отличная мысль!\n<strong>Алекс</strong>: Пока ты бегаешь, я подготовлю itemB (асинхронная операция). Только обязательно скажи, нашел ли ты itemA (возвращаемое промисом значение).\n<strong>Промис: **А если тебя не будет дома, когда я вернусь?\n**Алекс: **Тогда отправь мне смску, что ты вернулся и принесitem для меня (успешный колбэк). Если ты не найдешь, позвони мне немедленно (неуспешный колбэк).\n**Промис:</strong> Отлично! Увидимся позже!</p>\n</blockquote>\n<p>Проще говоря, объект promise—это данные, возвращаемые асинхронной функцией. Это может бытьresolve, если функция прошла успешно или reject, если функция вернула ошибку.</p>\n<h2>Определение</h2>\n<p>Промис — это объект, представляющий окончательное завершение или сбой асинхронной операции. По сути, промис — это возвращаемый объект, к которому прикрепляется колбэк, вместо его передачи в функцию.</p>\n<h2>Промис в JS</h2>\n<p>Давайте сначала поговорим о <em>JavaScript</em> и его параллелизме. <em>JavaScript</em> является однопоточным. Всё происходит в той последовательности, в которой написано, но асинхронные операции происходят в порядке их завершения.</p>\n<p>Что, по вашему мнению, выведется в консоль в следующем примере?</p>\n<pre><code>console.log('1');\nsetTimeout(function(){ console.log('2'); }, 3000);\n\nconsole.log('3');\nsetTimeout(function(){ console.log('4'); }, 1000);\n</code></pre>\n<p>Результатом будет 1 3 4 2. Вы можете задаться вопросом, почему 4 встречается раньше чем 2. Причина в том, что, несмотря на то, что строка с 2 описана раньше, она начала выполняться только после 3000 мс, поэтому 4 выводится до 2.</p>\n<p>В типичном веб-приложении может выполняться множество асинхронных операций, таких как загрузка изображений, получение данных из <em>JSON</em>, обращение к <em>API</em> и других.</p>\n<p>Теперь рассмотрим, как создать промис в <em>JavaScript</em>:</p>\n<pre><code>var promise = new Promise(function(resolve, reject) {\n  // Делаем, что-то, возможно асинхронное, тогда…\n\n  if (/* Всё прошло отлично */) {\n    resolve('Сработало!');\n  }\n  else {\n    reject(Error('Сломалось'));\n  }\n});\n</code></pre>\n<p>Конструктор Promise принимает один аргумент: колбэк с двумя параметрами — resolve и reject. Этот промис может быть использован следующим образом:</p>\n<pre><code>promise.then(function(result) {\n  console.log('Промис сработал');\n}, function(err) {\n  console.log('Что-то сломалось');\n});\n</code></pre>\n<p>Если промис прошёл успешно, будет выполнен resolve, и консоль выведет Промис сработал, в противном случае выведется Что-то сломалось. Это состояние до получения resolveили reject называется состоянием ожидания, pending. Таким образом, есть три состояния промиса:</p>\n<ol>\n<li>\n<p>Ожидание ответа: pending</p>\n</li>\n<li>\n<p>Успешное выполнение: resolve</p>\n</li>\n<li>\n<p>Выход ошибкой: reject</p>\n</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/8576/1*FX8c_5NxTkNo7NyEkWsjSQ.jpeg\" alt=\"Промис успешно выполнился, [фото Скотта Вебба](https://www.pexels.com/photo/man-couple-love-people-136402/).\"><em>Промис успешно выполнился, <a href=\"https://www.pexels.com/photo/man-couple-love-people-136402/\">фото Скотта Вебба</a>.</em></p>\n<h2>Пример</h2>\n<p>Чтобы полностью понять концепцию промисов, создадим приложение, которое загрузит изображение. Если изображение загружено, оно будет отображено, иначе будет выводится ошибка.</p>\n<p>Сначала создадим promise с XMLHttpRequest:</p>\n<pre><code>const loadImage = url => {\n  return new Promise(function(resolve, reject) {\n    // Открываем новый XHR\n    var request = new XMLHttpRequest();\n    request.open('GET', url);\n\n    // После загрузки запроса\n    // проверяем, был ли он успешным\n    request.onload = function() {\n      if (request.status === 200) {\n        // Если успешный, то резолвим промис\n        resolve(request.response);\n      } else {\n        // Если нет, то реджектим промис\n        reject(Error(\n          'Произошла ошибка. Код ошибки:' + request.statusText\n        ));\n      }\n    };\n\n    request.send();\n  });\n};\n</code></pre>\n<p>Теперь, когда изображение успешно загружено, promise вернет resolve с ответом от <em>XHR</em>. Давайте используем этот promise, вызвав функцию loadImage.</p>\n<pre><code>const embedImage = url => {\n  loadImage(url).then(function(result) {\n      const img = new Image();\n      var imageURL = window.URL.createObjectURL(result);\n      img.src = imageURL;\n      document.querySelector('body').appendChild(img);\n    },\n    function(err) {\n      console.log(err);\n    });\n}\n</code></pre>\n<p>Мы сделали это! Неплохо, да?</p>\n<p>А теперь сделай несколько промисов сам! Давай :)</p>\n<h3>Дополнительные материалы</h3>\n<p>Вот некоторые статьи, которые показались мне очень полезным в процессе обучения:</p>\n<ol>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">Статья про промисы на MDN</a></p>\n</li>\n<li>\n<p><a href=\"http://https//developers.google.com/web/fundamentals/primers/promises\">Введение на Google Developers</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Run-to-completion\">Про concurrency model на MDN</a></p>\n</li>\n</ol>","frontmatter":{"title":"Промисы на примерах из жизни","date":"TODO"}}},"pageContext":{"slug":"/articles/promises-explained/"}}