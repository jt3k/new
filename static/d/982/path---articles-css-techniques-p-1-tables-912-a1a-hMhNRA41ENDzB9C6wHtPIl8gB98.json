{"data":{"site":{"siteMetadata":{"title":"Веб-стандарты"}},"markdownRemark":{"id":"31b860ea-c760-5687-b8c2-f91237555c37","excerpt":"Основные способы вёрстки. Часть первая: таблица Лев Солнцев  27 июня 2013 Для профессионального оформления сайтов необходимо знать не только…","html":"<h1>Основные способы вёрстки. Часть первая: таблица</h1>\n<p><a href=\"http://my.opera.com/GreLI/blog/\">Лев Солнцев</a> 27 июня 2013</p>\n<p>Для профессионального оформления сайтов необходимо знать не только основы CSS, но и понимать, как работает браузер, знать правила, которым он следует. Именно они определяют основные способы и приёмы вёрстки.</p>\n<p>Только имея такое понимание, можно выбрать наиболее подходящий способ решения задачи из нескольких возможных, с учётом их достоинств и ограничений. Только так можно наиболее полно задействовать возможности браузера и предупредить потенциальные ошибки.</p>\n<p>Существует немало описаний различных приёмов. В этой статье предпринята попытка собрать вместе самые важные приёмы и систематизировать их, чтобы дать представление как об основных возможностях, так и об ограничениях CSS, актуальных в настоящее время.</p>\n<p>Статья рассчитана на людей, которые знакомы с основами HTML и CSS и имеют представление об основных свойствах и базовых принципах работы каскадных таблиц стилей.</p>\n<h2>Таблица</h2>\n<p>Исторически, первым и единственным способом раскладки страницы были таблицы. Описанию поведения таблиц посвящена <a href=\"http://www.w3.org/TR/CSS2/tables.html\">целая глава</a> в спецификации CSS 2.1. Несмотря на такой объем, некоторые моменты описаны скудно или вообще не определены и отданы на усмотрение браузеров.</p>\n<h3>Достоинства и недостатки</h3>\n<p>Таблица служит для отображения упорядоченных данных в строках и столбцах, имеющих смысловую связь по горизонтали или вертикали. Отсюда следует главное достоинство: ячейки таблиц выравниваются по сетке, что позволяет простым и очевидным образом создать <em>модульную сетку</em>.</p>\n<p>Это неотъемлемое свойство таблиц позволяет заполнить плоскость окна браузера и создавать «резиновые сайты». Но, как при малых, так и больших размерах окна просмотра браузера структура таблицы не меняется, она не может гибко адаптироваться под доступное пространство.</p>\n<p>При использовании таблицы для раскладки, то есть размещения в сетке данных, не имеющих смысловой связи, нарушается семантичность. Применение таких таблиц ухудшает доступность для людей, использующих специальные программы, и снижает положение в поисковой выдаче, поскольку поисковому движку, предположительно, сложнее разобраться в структуре страницы. Как следствие, сайт работает менее эффективно.</p>\n<h3>Особенности</h3>\n<p>Ячейки таблиц идут в коде строго друг за другом, слева направо или справа налево в зависимости от направления языка, заданного CSS-свойством <code>direction</code> или его аналогом в HTML, атрибутом <code>dir</code>.</p>\n<p>Если, к примеру, требуется, чтобы основное содержимое в центральной колонке шло в начале, перед содержимым других колонок в исходном HTML-коде, таблица — неподходящее решение.</p>\n<p>Структура таблицы довольно сложна, она описывается большим количеством тегов, что приводит к усложнению исходного кода. Негативный эффект проявляется ещё больше, когда несколько таблиц вложены друг в друга.</p>\n<h3>Имитация</h3>\n<p>Появившаяся в CSS 2.1 группа свойств <code>display: table-*</code> позволяет создать таблицу из произвольных элементов, имеющих соответствующую структуру.</p>\n<p>Согласно спецификации, достаточно только одного объявления вроде <code>display: table</code> или <code>display: table-cell</code> — недостающие элементы должны автоматически достраиваться браузером.</p>\n<p>Однако будет надёжнее создать минимальную структуру <code>таблица > ряд > ячейка</code>, аналогично обязательным тегам <code>&#x3C;table></code>, <code>&#x3C;tr></code>, <code>&#x3C;td></code>, с соответствующими значениями свойства <code>display</code>: <code>table</code>, <code>table-row</code> и <code>table-cell</code>.</p>\n<p>В противном случае может возникнуть нерегулярно проявляющаяся ошибка, замеченная в Firefox и браузерах на основе Webkit, когда ряд таблицы без элемента с <code>display: table-cell</code> случайным образом разбивается на несколько ячеек. Возможное объяснение может состоять в попадании границы сетевых пакетов среди ячеек при передаче HTML-кода.</p>\n<p>Таким образом, блочная разметка с <code>display: table-*</code> почти не отличается от обычной HTML-таблицы ни в чем, кроме имён тегов, однако обычная таблица лучше поддерживается браузерами (а именно в Internet Explorer 7 и ниже) и имеет больше возможностей, таких как объединение ячеек.</p>\n<p>Стоит отметить, что, несмотря на необязательность тега <code>&#x3C;tbody></code> в HTML, браузер обязательно создаст этот элемент, если только документ не обрабатывается в режиме XHTML, при отсутствии группирующих элементов <code>&#x3C;tbody></code>, <code>&#x3C;thead></code> и <code>&#x3C;tfoot></code>. Этим можно пользоваться при оформлении, и обязательно следует иметь в виду при использовании родительского селектора, который может иметь запись вида <code>table > tbody > tr > td</code>. Селектор <code>table > tr > td</code> работать не будет.</p>\n<p>Анонимные элементы при <code>display: table-*</code>, воссоздающие структуру таблицы согласно CSS 2.1, не влияют на дерево элементов. Им нельзя задать CSS-правила, действуют только наследуемые свойства.</p>\n<h3>Семантичность</h3>\n<p>Существует мнение, что использование <code>display: table</code> более семантично, так как используются теги, лучше соответствующие содержимому, и это поможет различным движкам в обработке страницы. Нередко при этом приводятся в пример программы чтения с экрана.</p>\n<p>Однако есть <a href=\"http://www.456bereastreet.com/archive/201110/using_displaytable_has_semantic_effects_in_some_screen_readers/\">исследования</a>, которые показывают, что некоторые такие программы учитывают оформление страницы и воспринимают элементы с <code>display: table</code> точно так же, как и обычную таблицу, размеченную стандартными тегами. Тем не менее такой способ имеет право на существование, когда использование тегов таблицы неуместно.</p>\n<p>Рекомендуется использовать методы <a href=\"http://www.w3.org/TR/WCAG-TECHS/html.html\">WCAG</a> для семантичного оформления таблиц, задействуя дополнительные возможности разметки, такие как краткое описание с помощью тега <code>&#x3C;caption></code> или атрибута <code>summary</code> и указание области действия заголовков <code>&#x3C;th></code> атрибутом <code>scope</code>.</p>\n<h3>Ширина</h3>\n<p>Ширина таблицы, будучи не задана, рассчитывается браузером с учётом содержимого. Если ширина таблицы меньше ширины родительского элемента, таблица может быть отцентрирована с помощью свойства <code>margin: auto</code> или выровнена по левому или правому краю.</p>\n<p>При <code>table-layout: auto</code> (значение по умолчанию) ширина таблицы расчитывается так, чтобы поместилось всё её содержимое. Если ширина элемента, в котором находится таблица, недостаточна, она выйдет за его пределы.</p>\n<p>Это может привести к появлению горизонтальной прокрутки на странице даже тогда, когда казалось бы достаточно места, из-за слишком длинного слова (например, какой-то интернет-адрес) или широкого изображения.</p>\n<p>В CSS 2.1 не определено действие свойств <code>min-width</code>, <code>max-width</code>, <code>min-height</code> и <code>max-height</code> на элементы таблицы.</p>\n<p>Так как ячейка не может иметь ширину меньшую, чем позволяет её содержимое, вместо <code>min-width</code> можно использовать достаточно широкую «распорку». Для этого можно использовать пустой блок нужной ширины.</p>\n<p>С оговоркой, о которой будет сказано далее, ограничить ширину ячейки может задание свойства <code>width</code>. Этот способ работает в современных браузерах, включая Internet Explorer 8 и даже в старших версиях Internet Explorer в режиме Internet Explorer 7, но не в настоящем браузере Internet Explorer 7. Это один из тех случаев, когда поведение в режиме эмуляции отличается от настоящей версии браузера.</p>\n<p>Ширина ячейки может не соответствовать предписанному значению в том случае, когда заданная для всей таблицы ширина не равна сумме заданных ширин всех ячеек, или их сумма не равна 100%. Тогда доступное место распределяется среди ячеек пропорционально значениям их ширины.</p>\n<p>В соответствии со стандартной блочной моделью CSS ширина ячейки задаётся по области содержимого, исключая толщину рамки и величину отступа <em>(padding)</em>. Однако, если ширина колонки таблицы устанавливается через элемент <code>&#x3C;col></code> или <code>&#x3C;colgroup></code>, то она задаётся уже с учётом ширины рамок и отступа ячеек.</p>\n<h3>Гибкость</h3>\n<p>Одним из преимуществ является то, что таблица позволяет гибко управлять соотношением ширин колонок через процентные значения. Ширина ячеек при этом учитывает размер содержимого.</p>\n<p>Примечательным свойством таблицы среди возможностей CSS 2.1 является возможность установить такую ширину ячейке, которая осталась ей доступна от остальных ячеек в ряду.</p>\n<h3>Высота</h3>\n<p>По спецификации свойство <code>height</code> задаёт только минимальную высоту ячейки. Если с шириной ячеек браузеры следуют модели CSS, то установку высоты ячейки разные браузеры трактуют по-разному.</p>\n<p>Firefox до 15-й версии и Opera до 12-й включительно считают высоту вместе с отступом и рамкой, другими словами, ведут себя как при <code>box-sizing: border-box</code>, что соответствует поведению в режиме обратной совместимости <em>(Quirks Mode)</em>.</p>\n<p>Internet Explorer версии 8 и выше и браузеры на основе WebKit задают высоту только для содержимого аналогично <code>box-sizing: content-box</code>, что является правильным поведением с точки зрения модели CSS.</p>\n<p>На текущий момент свойство <code>box-sizing</code> влияет на задание высоты ячейки только в браузере Internet Explorer. А Firefox до 16 версии не учитывал <code>box-sizing</code> даже для ширины ячеек таблиц.</p>\n<h3>Раскладка</h3>\n<h4>Жёсткая</h4>\n<p>При <code>table-layout: fixed</code> ширина ячеек таблицы задаётся непосредственно, либо равномерно распределяется среди колонок. Таблица теряет возможность автоматического расчёта ширины с учётом заполненности ячеек. Переполнение ячеек обрабатывается в соответствии со значением свойства <code>overflow</code>. Спецификация оставляет браузерам возможность всегда использовать этот режим. Его могут применять мобильные браузеры, ограниченные в ресурсах для сложной обработки таблиц.</p>\n<h4>Автоматическая</h4>\n<p>При <code>table-layout: auto</code> содержимое не может выйти за границы ячейки, и свойство <code>overflow</code> не имеет действия. При этом нельзя заставить таблицу всегда оставаться в заданных рамках. Из-за автоматического расчёта ширины, она не уменьшится, даже если есть <code>overflow: hidden</code> у элемента с неопределенной шириной внутри ячейки.</p>\n<figure>\n\t<img src=\"/logo-n-menu-0bb03c48564ec62fcb0b14fbd40b3ff9.svg\" alt=\"\">\n\t<figcaption>&#x414;&#x438;&#x437;&#x430;&#x439;&#x43D;&#x435;&#x440; &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x436;&#x435;&#x43B;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43B;&#x43E;&#x433;&#x43E;&#x442;&#x438;&#x43F; &#x438;&#xA0;&#x43C;&#x435;&#x43D;&#x44E; &#x432;&#x441;&#x435;&#x433;&#x434;&#x430; &#x443;&#x43C;&#x435;&#x449;&#x430;&#x43B;&#x438;&#x441;&#x44C; &#x432;&#xA0;&#x43E;&#x434;&#x43D;&#x43E;&#x439; &#x441;&#x442;&#x440;&#x43E;&#x447;&#x43A;&#x435;. &#x422;&#x430;&#x431;&#x43B;&#x438;&#x446;&#x430; &#x43D;&#x435;&#xA0;&#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43E;&#x431;&#x440;&#x435;&#x437;&#x430;&#x442;&#x44C; &#x434;&#x43B;&#x438;&#x43D;&#x43D;&#x44B;&#x435; &#x43D;&#x430;&#x434;&#x43F;&#x438;&#x441;&#x438; &#x434;&#x43B;&#x44F; &#x44D;&#x442;&#x43E;&#x439; &#x446;&#x435;&#x43B;&#x438;.</figcaption>\n</figure>\n<h3>Быстродействие</h3>\n<p>Cвойство <code>table-layout: fixed</code> предназначено для того чтобы отображать большие таблицы по мере загрузки данных — так происходит, потому что размеры ячеек указаны заранее.</p>\n<p>Если установлено <code>table-layout: auto</code>, браузер должен рассчитывать размеры таблицы, рекурсивно обрабатывая всё её содержимое, что не может не сказаться на быстродействии. При этом в большинстве браузеров таблица будет показана лишь после того, как загрузится полностью.</p>\n<h3>Выравнивание</h3>\n<p>Таблица позволяет выравнивать содержимое своих ячеек как по горизонтали (<code>text-align</code>), так и по вертикали при помощи <code>vertical-align</code>.</p>\n<p>Несмотря на то, что выравнивание по вертикали как строчных элементов, так и содержимого ячеек таблиц задаётся одним и тем же свойством, его действие отличается в каждом случае.</p>\n<p>Для строчных элементов оно действует на сами элементы и имеет больше вариантов, тогда как в случае таблиц выравнивается содержимое ячеек, включая блочные элементы.</p>\n<p>Возможные значения свойства <code>vertical-align</code> для ячеек таблиц: <code>top</code>, <code>bottom</code>, <code>middle</code> и <code>baseline</code> — выравнивание по верхней границе, нижней границе, середине и базовой линии, соответственно. Выравнивание по базовой линии производится по первой строчке текста, а если таковой нет, то по самой нижней границе блока в ячейке.</p>\n<p>Последний вариант уникален: таблица позволяет выровнять строки текста по базовой линии в разных колонках даже при различных свойствах шрифта.</p>\n<p>Другими методами в рамках CSS 2.1 такого эффекта добиться практически невозможно из-за погрешностей округления значений и особенностей отрисовки текста операционными системами и браузерами. В лучшем случае можно только подогнать параметры под наиболее вероятную ситуацию: вроде распространённой гарнитуры и стандартного размера шрифта.</p>\n<figure>\n\t<img src=\"/table-form-4050f2051b70a8a17a4f75d5de2a5d51.svg\" alt=\"\">\n\t<figcaption>&#x422;&#x430;&#x431;&#x43B;&#x438;&#x446;&#x430; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43B;&#x435;&#x433;&#x43A;&#x43E; &#x438;&#xA0;&#x43D;&#x430;&#x434;&#x451;&#x436;&#x43D;&#x43E; &#x432;&#x44B;&#x440;&#x43E;&#x432;&#x43D;&#x44F;&#x442;&#x44C; &#x437;&#x430;&#x433;&#x43E;&#x43B;&#x43E;&#x432;&#x43A;&#x438; &#x438;&#xA0;&#x44D;&#x43B;&#x435;&#x43C;&#x435;&#x43D;&#x442;&#x44B; &#x444;&#x43E;&#x440;&#x43C; &#x43F;&#x43E;&#xA0;&#x431;&#x430;&#x437;&#x43E;&#x432;&#x43E;&#x439; &#x43B;&#x438;&#x43D;&#x438;&#x438;.</figcaption>\n</figure>\n<h3>Проблемы позиционирования</h3>\n<p>В старых версиях WebKit и текущих версиях Mozilla Firefox нельзя позиционировать элементы таблицы, и потому не получится позиционировать внутренние элементы относительно ячейки. Хотя спецификация не определяет действие свойства <code>position</code> на элементы таблиц, имеется открытое <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=35168\">сообщение об ошибке</a> браузера Firefox.</p>\n<p>Из-за этой особенности нет работающего во всех браузерах способа разместить что-либо сверху и снизу ячейки одновременно. Иногда проблему можно обойти, разбив ряд таблицы на два, но такое решение ведёт к усложнению кода, а полученная сетка может уже скорее мешать, чем помогать.</p>\n<p>В соответствии с принципами CSS установить высоту для элементов внутри таблицы, зависящую от высоты ячейки, можно только в том случае, когда самой ячейке задана высота. Также из-за этого не получится расположить элементы одновременно сверху и снизу с помощью позиционирования относительно внутреннего элемента. Ведь если высота не известна точно заранее, никогда нет гарантии, что соседняя ячейка, а значит и весь ряд, не имеет большую высоту.</p>\n<h3>Заключение</h3>\n<p>В будущем к нам придут на помощь новые модули CSS, но до окончательной разработки и полноценного внедрения, когда ими можно будет реально пользоваться, пройдёт ещё как минимум несколько лет.</p>\n<p>Один из таких модулей — <a href=\"http://www.w3.org/TR/css3-grid-layout/\">CSS Grid Layout</a> — не только позволяет создать модульную сетку, аналогичную таблице, но и даёт большие возможности по оформлению и использованию. При совместном использовании с <a href=\"http://www.w3.org/TR/css3-mediaqueries/\">медиавыражениями</a>, модуль позволяет произвольно адаптировать раскладку под размеры окна одними лишь средствами CSS. Он избавит нас в будущем от необходимости использовать таблицу для раскладки и оставить её, наконец, для своего основного предназначения: разметки табличных данных.</p>\n<p>О других приёмах и возможностях CSS 2.1 без использования таблиц читайте во второй части статьи «<a href=\"/articles/css-techniques-p2-alternate/\">Бестабличная вёрстка</a>».</p>","frontmatter":{"title":"Основные способы вёрстки. Часть первая: таблица","date":"27 июня 2013"}}},"pageContext":{"slug":"/articles/css-techniques-p1-tables/"}}