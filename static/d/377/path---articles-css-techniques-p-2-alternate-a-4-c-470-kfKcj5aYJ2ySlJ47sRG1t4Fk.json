{"data":{"site":{"siteMetadata":{"title":"Веб-стандарты"}},"markdownRemark":{"id":"af3ea8f8-85be-5126-a879-da9692451585","excerpt":"Основные способы вёрстки. Часть вторая: бестабличная вёрстка Лев Солнцев  28 июня 2013 С развитием CSS появились способы вёрстки без…","html":"<h1>Основные способы вёрстки. Часть вторая: бестабличная вёрстка</h1>\n<p><a href=\"http://my.opera.com/GreLI/blog/\">Лев Солнцев</a> 28 июня 2013</p>\n<p>С развитием CSS появились способы вёрстки без использования таблиц, которым посвящена <a href=\"/articles/css-techniques-p1-tables/\">первая часть статьи</a>. Таблицы обладают рядом особенностей, из-за которых порой невозможно добиться желаемого эффекта. Особенно это было актуально ранее, когда браузеры были менее совершенными в применении современных стандартов. В таких случаях для оформления лучше подходят альтернативные приёмы.</p>\n<h2>Обтекаемые блоки</h2>\n<p>Первый приём основан на использовании обтекаемых блоков, так как с их помощью можно произвольно располагать элементы по горизонтали. По сути, это использование свойства <code>float</code> не по назначению, которое сдвигает блок влево или вправо и включает обтекание текста.</p>\n<h3>Особенности</h3>\n<p>Обтекаемые элементы имеют ширину, зависящую от содержимого, и занимают доступное для этой ширины место. Если его не хватает, они смещаются вниз до тех пор, пока не хватит места или не останется других обтекаемых блоков.</p>\n<figure>\n    <img src=\"/floats-69219dd1de914a51a9e59ee1caace7a2.svg\" alt=\"\">\n    <figcaption>&#x41F;&#x440;&#x438;&#x43C;&#x435;&#x440; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x433;&#x43E; &#x440;&#x430;&#x441;&#x43F;&#x43E;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x438;&#x44F; &#x43F;&#x440;&#x43E;&#x438;&#x437;&#x432;&#x43E;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x43E;&#x431;&#x442;&#x435;&#x43A;&#x430;&#x435;&#x43C;&#x44B;&#x445; &#x431;&#x43B;&#x43E;&#x43A;&#x43E;&#x432;.</figcaption>\n</figure>\n<p>Обтекаемые элементы частично изымаются из потока и обычные блоки проходят сквозь них. Меняется лишь расположение текста из-за сужения строк. Строчные элементы располагаются там, где им хватает места в строках.</p>\n<figure>\n    <img src=\"/float-how-f9797e8be34c4f3c6d35cdc2779916b4.svg\" alt=\"\">\n    <figcaption>&#x41F;&#x440;&#x438;&#x43D;&#x446;&#x438;&#x43F; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x44B; &#x43E;&#x431;&#x442;&#x435;&#x43A;&#x430;&#x435;&#x43C;&#x44B;&#x445; &#x431;&#x43B;&#x43E;&#x43A;&#x43E;&#x432;. &#x410;&#x434;&#x430;&#x43F;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x438;&#x43B;&#x43B;&#x44E;&#x441;&#x442;&#x440;&#x430;&#x446;&#x438;&#x44F; &#x438;&#x437;&#xA0;&#x441;&#x43F;&#x435;&#x446;&#x438;&#x444;&#x438;&#x43A;&#x430;&#x446;&#x438;&#x438;.</figcaption>\n</figure>\n<p>Обычный блок, в котором находится обтекаемый, заканчивается раньше обтекаемого блока, что не подходит для раскладки. Для получения предсказуемого результата (а также во избежание проблем в Internet Explorer 7 и ниже) желательно каждый ряд с раскладкой обтекаемыми блоками заключать в специальный оборачивающий элемент, создающий новый контекст форматирования, или воспользоваться трюком, известным как «очистка» (<em>clearfix</em>).</p>\n<h3>Контекст форматирования</h3>\n<p>Когда элемент создаёт новый контекст форматирования, через его границы не проникают обтекаемые элементы, а поля не складываются. В Internet Explorer 7 и ниже аналогично ведут себя элементы с <em><a href=\"http://www.satzansatz.de/cssd/onhavinglayout.html\">hasLayout</a></em>, что помогает достичь кроссбраузерности.</p>\n<p>Согласно CSS 2.1, <a href=\"http://www.w3.org/TR/CSS2/visuren.html#block-formatting\">новый контекст форматирования</a> создают: обтекаемые блоки; абсолютно позиционированные блоки; содержащие блоки элементы (вроде строчных блоков <code>inline-block</code> и элементов таблиц); блоки, значение свойства <code>display</code> которых отличается от <code>block</code>; и блоки с <code>overflow</code>, отличным от <code>visible</code>. Новые типы блоков из других модулей CSS также имеют подобный эффект.</p>\n<h3>Очистка</h3>\n<p>Трюк «очистка» заключается в использовании свойства <code>clear</code> для псевдоэлемента <code>:after</code>, генерируемого в конце блока, что вынуждает браузер разместить нижнюю границу после обтекаемых элементов.</p>\n<p>Первоначальный код (существуют вариации) для современных браузеров выглядит так:</p>\n<pre><code>.clearfix:after {\n    clear: both;        /* Сама очистка */\n    display: block;     /* По умолчанию — display: inline */\n    content: \".\";       /* Предотвращение сложения полей */\n    height: 0;          /* Устранение влияния текста */\n    visibility: hidden; /* Скрытие текста */\n}\n</code></pre>\n<p>Спустя некоторое время появилась обновлённая версия, «<a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">микроочистки</a>», выглядящая следующим образом:</p>\n<pre><code>.clearfix:before,\n.clearfix:after {\n    display: table;\n    content: \"\";\n}\n\n.clearfix:after {\n    clear: both;\n}\n</code></pre>\n<p>В этом варианте сложение полей <em>(margin collapsing)</em>, которое может происходить и сквозь пустой псевдоэлемент, предотвращается с помощью <code>display: table</code>, причём не только в конце элемента, но и в начале.</p>\n<p>А благодаря пустой строке в значении свойства <code>content</code> отпадает необходимость прятать сгенерированное содержимое.</p>\n<p>Трюк позволяет заключить обтекаемые блоки внутри элемента, подобно тому, как это происходит в блоках с новым контекстом форматирования. Но в отличие от последних, у элемента полная ширина, и он не имеет присущих им ограничений.</p>\n<h3>Адаптация</h3>\n<img src=\"/float-overflow-5acaf90461c3b4ebe4446c1987f52175.svg\" alt=\"\">\n<p>Блок, у которого новый контекст форматирования задан с помощью значения <code>overflow</code>, отличного от <code>visible</code> (то есть <code>auto</code>, <code>scroll</code> или <code>hidden</code>), обладает примечательным свойством: такой блок занимает всё доступное место по горизонтали. Если он следует за обтекаемым блоком, его ширина соответственно уменьшается на значение ширины обтекаемого блока.</p>\n<p>Хотя такое поведение — необязательное требование спецификации, браузеры солидарны в данном вопросе.</p>\n<p>Эта особенность даёт возможность задействовать эффект обрезания неуместившегося текста с многоточием на месте сокращения: <code>text-overflow: ellipsis</code>, которого нельзя достигнуть таблицой с автоматическим расчётом ширины.</p>\n<img src=\"/mail-folders-24daa508ba7de37c57501a2de68056cb.svg\" alt=\"\">\n<p>Примером такого использования могут быть папки в почтовом интерфейсе, где напротив имён папок показывается количество сообщений в них. Если имя папки слишком длинно, чтобы поместиться, то оно обрезается.</p>\n<p>Количество сообщений, заранее неизвестное, может исчисляться тысячами и даже меняться в реальном времени. Вдобавок, ширина элементов зависит от параметров шрифта и даже механизма отрисовки браузера и операционной системы.</p>\n<p>Можно ограничить длину любых имён, выделив место для чисел с большим запасом, но было бы неразумно делать такое ограничение из-за не столь частых, хотя и встречающихся, случаев.</p>\n<h3>Ограничения</h3>\n<p>Заметный недостаток адаптирующегося по ширине элемента заключается в том, что всё его содержимое обрезается по краям блока. Это препятствует использованию выносных элементов любого рода и даже графических эффектов вроде обводок и теней. Вдобавок, обтекаемые блоки должны идти первыми в исходном коде.</p>\n<p>Одним из главных недостатков методов с использованием обтекаемых блоков является отсутствие возможности произвольного выравнивания по вертикали. Хуже того, как можно было заметить из примера, когда они имеют разную высоту, то вместо стройных рядов может выйти хаотичная мозаика.</p>\n<p>Расположение элементов по рядам — это то, с чем хорошо справляются строчные блоки.</p>\n<h2>Строчные блоки</h2>\n<p>Строчный блок — это блок, который размещается в текстовой строке, имеющий свойство <code>display: inline-block</code>. Строчные блоки предоставляют уникальные возможности в рамках CSS 2.1, так как, будучи строчными элементами, они могут содержать любые блоки.</p>\n<p>В особенной модели Internet Explorer 7 и ниже строчные блоки — это обычные строчные элементы, у которых есть свойство <em>hasLayout</em>. Правило <code>display: inline-block</code> включает именно это свойство, но эффект достигается только на строчных элементах. Блочным элементам требуется задать <code>display: inline</code> и включить <var>hasLayout</var> другим способом: например, с помощью <code>zoom: 1</code>, или вынести объявление <code>display: inline-block</code> в отдельный блок правил.</p>\n<p>Так же, как и у обтекаемых блоков или ячеек таблиц, ширина строчных блоков, если не указана, рассчитывается браузером с учётом содержимого.</p>\n<p>Как и ячейки таблиц, они идут в строгом порядке друг за другом: слева направо или справа налево в зависимости от направления письма.</p>\n<p>Благодаря своему расположению в строках текста, строчные блоки располагаются строго по рядам, что нередко предпочтительней.</p>\n<figure>\n    <img src=\"/inline-blocks-751c374c38c79579cf681edfdf7e5fbb.svg\" alt=\"\">\n    <figcaption>&#x41F;&#x440;&#x438;&#x43C;&#x435;&#x440; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x433;&#x43E; &#x440;&#x430;&#x441;&#x43F;&#x43E;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x438;&#x44F; &#x441;&#x442;&#x440;&#x43E;&#x447;&#x43D;&#x44B;&#x445; &#x431;&#x43B;&#x43E;&#x43A;&#x43E;&#x432;.</figcaption>\n</figure>\n<p>Примечательной особенностью строчных блоков является возможность их выравнивания подобно другим текстовым элементам как по горизонтали, так и по вертикали.</p>\n<h3>Горизонтальное выравнивание</h3>\n<p>Кроме привычного выравнивания слева или справа строчным блокам можно делать полную выключку — выравнивание одновременно по обоим краям одновременно — с помощью <code>text-align: justify</code>. Последняя строка, однако, всё равно остаётся выровненной слева или справа в зависимости от направления письма.</p>\n<p>Проблему с последней строкой можно обойти при помощи свойства <code>text-align-last: justify</code>, которое поддерживается браузерами Internet Explorer 5.5+ и Firefox 12+ (с префиксом <code>-moz-</code>), и включено в разрабатываемый модуль <a href=\"http://www.w3.org/TR/css3-text/\">CSS3 Text</a>.</p>\n<p>Отсутствие поддержки этого свойства в остальных браузерах можно заменить добавлением псевдоэлемента <code>:after</code> или пустого строчного блока со стопроцентной шириной:</p>\n<pre><code>.justify:after {\n    display: inline-block;\n    width: 100%;\n    content: \"\";\n}\n</code></pre>\n<img src=\"/inline-justifying-106aa409e3cdafc176c65d15fa6ff107.svg\" alt=\"\">\n<p>Метод хорош тем, что позволяет выравнивать таким образом заранее неизвестное число элементов. Количество элементов в ряду также может меняться, адаптируясь к ширине окна просмотра.</p>\n<p>Недостатки метода в дополнительном элементе и лишней строке, добавляющей отступ, если не принять соответствующие меры.</p>\n<p>Этот приём можно использовать для размещения двух элементов в одной строке: слева и справа. Если они не умещаются в одну строку, то второй элемент окажется в начале следующей, а не в конце, как было бы в случае с обтекаемыми блоками. Это выглядит аккуратнее с точки зрения дизайна.</p>\n<h3>Вертикальное выравнивание</h3>\n<p>Строчные блоки по умолчанию выравниваются по базовой линии нижней строки. Но если значение <code>overflow</code> отличается от <code>visible</code>, строчные блоки должны выравниваться по своей нижней границе, чему, однако, не следуют браузеры на основе WebKit.</p>\n<p>Одно из полезных применений режимов выравнивания строчных блоков: вертикальное центрирование.</p>\n<p>Если нужно разместить какой-либо текст или изображение в ограниченном пространстве, выровняв по середине, то для этого можно использовать вспомогательный строчный блок с заданной высотой. Ему и блоку с содержимым задаётся вертикальное выравнивание по середине <code>vertical-align: middle</code>.</p>\n<pre><code>.holder {\n    word-wrap: none;\n}\n.edge,\n.centered {\n    display: inline-block;\n    vertical-align: middle;\n}\n.edge {\n    height: 100px;\n}\n.centered {\n    word-wrap: normal;\n}\n</code></pre>\n<img src=\"/inline-centering-ebab554d0527158e92c3f376fb9046ce.svg\" alt=\"\">\n<p>Выровненные блоки будут корректно вести себя при любых размерах. Если содержимого окажется слишком много, то при необходимости увеличится и высота родительского элемента, если она не ограничена неким заданным значением. Этим не может похвастаться метод центрирования абсолютно позиционированного блока.</p>\n<p>Чтобы избежать возможного переноса строк между вспомогательным элементом и содержимым, используется <code>word-wrap: none</code>. Следует вернуть значение свойства для содержимого обратно <code>word-wrap: normal</code>, чтобы оставить возможность переноса строк внутри текста.</p>\n<h3>Пробельные символы</h3>\n<p>Поскольку строчные блоки по определению являются элементами строк, между ними появляются пробелы, если в HTML-коде есть пробельные символы между тегами. Как правило, это нежелательный эффект, поскольку пробелы добавляют лишние отступы.</p>\n<p>Иногда пробелов можно избежать с помощью специального оформления кода: написанием тегов в подряд, использованием трюков с угловыми скобками или с помощью комментариев. Но такой подход не всегда возможен, например, использование таких приёмов может не позволять HTML-шаблонизатор.</p>\n<p>От лишних промежутков, добавляемых пробелами, можно избавиться с помощью CSS-свойства <code>word-spacing</code>:</p>\n<pre><code>word-spacing: -0.25em;\n</code></pre>\n<p>Данное объявление уменьшает пробелы между словами везде, кроме браузеров, основанных на WebKit. Дефект в WebKit был исправлен только недавно, и на момент написания этих строк его уже нет в Chrome 26, но он ещё присутствует в остальных браузерах на основе старых версий движка WebKit.</p>\n<p>Проблему в WebKit можно обойти через аналогичное объявление свойства <code>letter-spacing</code>:</p>\n<pre><code>letter-spacing: -0.25em;\n</code></pre>\n<p>Можно было бы всегда использовать это правило, но оно не работает в браузере Opera вплоть до 12 версии включительно. Есть и другие недостатки: браузер Mozilla Firefox имеет дефект, из-за которого строчные блоки переносятся на следующую строку в обтекаемом блоке из-за неверного расчёта ширины, а в Internet Explorer 7 теряется эффект при одновременном наличии обоих свойств.</p>\n<p>Поэтому следует выделить свойство <code>letter-spacing: -0.25em</code> только для WebKit, устранив при этом действие <code>word-spacing</code>. Либо же использовать только <code>letter-spacing</code> и выделить <code>word-spacing</code> отдельно для браузера Opera</p>\n<p>Внутри блоков следует вернуть значение свойств по умолчанию <code>0</code>, чтобы избежать слипания слов в тексте.</p>\n<p>В примере использовано значение <code>0.25em</code> — примерный размер пробела в гарнитуре Arial и некоторых других. Однако в иных гарнитурах значение может отличаться, например, Verdana имеет пробел шириной <code>0.34em</code>.</p>\n<p>Некоторые браузеры не допускают наложение строчных блоков, даже если отрицательное значение свойства по модулю больше ширины пробела. Спецификация допускает ограничение действия отрицательного значения.</p>\n<p>Но в WebKit это ограничение отсутствует, и строчные блоки могут накладываться друг на друга. Поэтому нужно тщательно подбирать используемое значение.</p>\n<h3>Ограничения</h3>\n<p>Основной недостаток строчных блоков, помимо пробелов, заключается в том, что нельзя задать блоку ширину, оставшуюся доступной от других элементов в ряду.</p>\n<p>Если ширина не задана, то она зависит от содержимого (<em>shrink-to-fit</em>) и по мере заполнения элемента может увеличиваться вплоть до ширины родительского элемента или даже превысить её.</p>\n<h2>Абсолютное позиционирование</h2>\n<p>Наибольший контроль над положением элементов можно получить с помощью позиционирования элементов по абсолютным координатам. Такие элементы полностью изымаются из потока и не влияют на остальные элементы страницы.</p>\n<h3>Особенности</h3>\n<p>Координаты абсолютно позиционированного элемента задаются относительно предка в дереве элементов, который тоже имеет свойство <code>position</code> со значением, отличным от <code>static</code>. С точки зрения оформления этот предок становится родительским блоком абсолютно позиционированного элемента.</p>\n<p>Промежуточные элементы между этим предком и абсолютно позиционированным блоком не имеют никакого влияния, даже если у них есть такое свойство, как <code>overflow: hidden</code>.</p>\n<p>Согласно спецификации, если координаты не заданы, то абсолютно позиционированный элемент должен располагаться примерно там, где оказался бы, не будучи позиционированным.</p>\n<p>Это даёт возможность применения некоторых приёмов, но, к сожалению, в браузерах всё ещё встречаются ошибки, связанные с таким позиционированием. Также при этом игнорируются режимы выравнивания элементов.</p>\n<h3>Выравнивание</h3>\n<p>Когда заданы координаты с двух противоположных сторон, абсолютно позиционированный элемент растягивается между указанными координатами. Этого не было в Internet Explorer 6, но, начиная с Internet Explorer 7, появилось и работает во всех браузерах.</p>\n<p>Если при этом задан соответствующий размер: ширина или высота, а свойство <code>margin</code> по той же оси имеет значение <code>auto</code>, то элемент выровняется посередине этих координат. Эту ситуацию правильно обрабатывают все браузеры, начиная с Internet Explorer 8.</p>\n<figure>\n    <img src=\"/position-aligning-97b7048834166e82f242df5337ad6ab2.svg\" alt=\"\">\n    <figcaption>&#x412;&#x44B;&#x440;&#x430;&#x432;&#x43D;&#x438;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x430;&#x431;&#x441;&#x43E;&#x43B;&#x44E;&#x442;&#x43D;&#x43E; &#x43F;&#x43E;&#x437;&#x438;&#x446;&#x438;&#x43E;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x431;&#x43B;&#x43E;&#x43A;&#x430; &#x43C;&#x435;&#x436;&#x434;&#x443; &#x437;&#x430;&#x434;&#x430;&#x43D;&#x43D;&#x430;&#x43C;&#x438; &#x43A;&#x43E;&#x43E;&#x440;&#x434;&#x438;&#x43D;&#x430;&#x442;&#x430;&#x43C;&#x438; &#x441; `margin: auto`.</figcaption>\n</figure>\n<h3>Заполнение</h3>\n<p>Если задана левая координата <code>left</code>, но не задана правая, то по мере заполнения элемент расширяется вплоть до правой границы предка, относительно которого идёт позиционирование, после чего начинается перенос текста. Аналогично и для обратного случая с правой координатой <code>right</code>.</p>\n<img src=\"/position-filling-d0b739b358660a0a4bf13b6243b91504.svg\" alt=\"\">\n<p>Такое поведение может быть как полезно, чтобы текст не слишком вытянулся в длину, или подсказка не вышла за границы экрана, так и вредно, если размеры позиционированного предка слишком малы.</p>\n<p>Браузеры соблюдают данное правило, начиная с Internet Explorer 8. В Internet Explorer 7 бывают ошибки, а в Internet Explorer 6 нет такого ограничения.</p>\n<h3>Контекст размещения</h3>\n<p>Свойство <code>z-index</code> указывает взаимное расположение позиционированных элементов по оси <code>z</code>, направленной к пользователю. Элементы с большим <code>z-index</code> показываются поверх элементов с меньшим значением свойства.</p>\n<figure>\n    <img src=\"/position-stacking-bc35904727c0754c310ccc46dc5c7417.svg\" alt=\"\">\n    <figcaption>&#x41E;&#x442;&#x43E;&#x431;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x435; &#x44D;&#x43B;&#x435;&#x43C;&#x435;&#x43D;&#x442;&#x43E;&#x432; &#x441;&#x43E;&#x433;&#x43B;&#x430;&#x441;&#x43D;&#x43E; &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x44F;&#x43C; `z-index`.</figcaption>\n</figure>\n<p>Хотя может показаться, что взаимная расстановка блоков определяется только их значениями <code>z-index</code>, положение позиционированного предка тоже определяется его значением <code>z-index</code>. Именно это значение является решающим, когда определяется, какой блок должен показываться поверх другого.</p>\n<p>Существует такое понятие как <strong>контекст размещения</strong> (<em>stacking context</em>): если значение <code>z-index</code> у родительского элемента отличается от <code>auto</code>, позиционированные элементы располагаются только внутри этого контекста. Даже элементы с отрицательным <code>z-index</code> отображаются поверх оформления родительского элемента, создающего контекст размещения, хотя и остаются под его содержимым.</p>\n<p>Вследствие этого, элемент с большим <code>z-index</code> и все его потомки отображаются поверх другого элемента с меньшим <code>z-index</code> и всех его потомков независимо от значений <code>z-index</code> самих потомков.</p>\n<figure>\n    <img src=\"/position-stacking-context-eb6e70d3c8cfc077b8c5990577423610.svg\" alt=\"\">\n    <figcaption>&#x41E;&#x442;&#x43E;&#x431;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x435; &#x441;&#xA0;&#x443;&#x447;&#x451;&#x442;&#x43E;&#x43C; &#x43A;&#x43E;&#x43D;&#x442;&#x435;&#x43A;&#x441;&#x442;&#x430; &#x440;&#x430;&#x437;&#x43C;&#x435;&#x449;&#x435;&#x43D;&#x438;&#x44F;.</figcaption>\n</figure>\n<p>Контекст размещения появляется не только при наличии <code>z-index</code>, но и при использовании свойств <code>opacity</code> или <code>transform</code> из модулей CSS 3.</p>\n<p>К сожалению, не обошлось без ошибок: Internet Explorer 8 по-особому размещает позиционированные псевдо-элементы <code>:before</code> и <code>:after</code>. Они имеют проблемы с расположением относительно как обычного, так и позиционированного содержимого элемента, к которому относятся. Эти дефекты не воспроизводятся в режиме эмуляции более старших версий вроде «Internet Explorer 10 в режиме Internet Explorer 8».</p>\n<p>Internet Explorer 7 (и ниже) по-своему работает с <code>z-index</code>: в этой версии браузера нет значения <code>auto</code>, значение свойства по умолчанию равно нулю. Понятие контекста размещения при этом имеется и действует на все позиционированные элементы.</p>\n<p>Интересно отметить, что какое-то время Internet Explorer 6 был единственным браузером, учитывающим контекст размещения.</p>\n<h2>Заключение</h2>\n<p>Здесь описаны далеко не все приёмы, а лишь дан общий обзор основных способов вёрстки. Они предназначены для обхода недостатков CSS при раскладке элементов. Этих методов явно недостаточно, но они дают возможность использования неочевидных приёмов, и позволяют полнее раскрыть возможности браузеров.</p>\n<p>Уже на подходе модули, которые прямо предназначены для сложного оформления. Модуль <a href=\"http://www.w3.org/TR/css3-flexbox/\">CSS Flexible Box Layout</a>, близкий к выпуску на момент написания статьи, позволяет гораздо более гибко выравнивать элементы и распределять доступное пространство между ними.</p>\n<p>В разработке находятся многочисленные новые модули CSS: для создания модульной сетки, для достижения недоступных сейчас типографических эффектов, и многие другие, дающие новые возможности и повышающие удобство пользования CSS.</p>\n<p>Со временем отпадёт необходимость в использовании описанных способов, и эти свойства будет разумнее использовать только по их прямому назначению.</p>","frontmatter":{"title":"Основные способы вёрстки. Часть вторая: бестабличная вёрстка","date":"28 июня 2013"}}},"pageContext":{"slug":"/articles/css-techniques-p2-alternate/"}}